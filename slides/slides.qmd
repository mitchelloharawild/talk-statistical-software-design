---
from: markdown+emoji
format: 
  revealjs:
    css: custom.css
---

```{r}
#| include: false
library(fable)
library(forecast)
library(ggplot2)
options(width = 75)
```


## {background-color="white" background-image="backgrounds/joanna-kosinska-1_CMoFsPfso-unsplash.jpg" background-size=cover}

::: {.v-center-bottom style="height: 70%"}
::: {.r-fit-text}
The design of statistical software
:::
:::

::: {.v-center}
Mitchell O'Hara-Wild
:::

## {background-color="black" data-background-opacity=0.5 background-image="backgrounds/rhondak-native-florida-folk-artist-_Yc7OtfFn-0-unsplash.jpg" background-size=cover}

<br>
<br>

::: {.center}
<h2>Materials are available on GitHub</h2>
:::

::: {.center}
[@github/mitchelloharawild/talk-statistical-software-design](https://github.com/mitchelloharawild/talk-statistical-software-design)
:::

<br>
<br>

::: {.center}
<h5>Background images from [unsplash.com](https://unsplash.com) contributors</h5>
:::


## {background-color="white" background-image="backgrounds/eran-menashri-zfVIh4cX_4c-unsplash.jpg" background-size=cover}

::: {.v-center-bottom style="height: 40%"}
This presentation is <span class="fragment strike" data-fragment-index="1">biased</span>
:::

::: {.v-center}
<p class="fragment fade-in" data-fragment-index="1">opinionated! :innocent:</p>
:::

## {background-color="white" background-image="backgrounds/PXL_20230128_014531932.jpg" background-size=cover}

::: {.v-right}
These opinions are shaped by my experiences.
:::

::: {.fragment .fade-in .v-right}
So, who am I?
:::
<!-- Focus on code style, specifically R. -->

## {background-color="white" background-image="backgrounds/20221018_064630_08F2CB6E.jpg" background-size=cover}

::: {.pull-left .box-blond .v-fill .fragment .fade-in}
I like to...

:::{.center .fragment .fade-in}
:hammer_and_wrench: Make things :hammer_and_wrench:
:::

:::{.center .fragment .fade-in}
:mushroom::seedling:Grow food :honey_pot::egg:
:::

:::{.center .fragment .fade-in}
:memo: Design systems :art:
:::

:::{.center .fragment .fade-in}
:computer: Write code :computer:
:::

:::{.center .fragment .fade-in}
:chart_with_upwards_trend: Utilise data :bar_chart:
:::

::: {.center .fragment .fade-in}
<video data-autoplay src="media/sleigh.mp4"></video>
:::
:::

## {background-color="white" background-image="backgrounds/PXL_20230329_080901601.jpg" background-size=cover}

::: {.box-blond .center .fragment .fade-in}
I'm most experienced in designing R packages.
:::

<br>
<br>
<br>
<br>

::: {.box-blond .center .fragment .fade-in}
There are many talented users and developers of statistical software here, please share your opinions at any time!
:::

## {background-color="white" background-image="backgrounds/alexander-hafemann-M-EwSRl8BK8-unsplash.jpg" background-size=cover}

:::{.center}
My data analytics experience in R is just a small part of the statistical software ecosystem.
:::

:::{.notes}
Excel, Tableau, PowerBI, etc.
:::

## {background-color="white" background-image="backgrounds/mad2023_statlang.png" background-size=contain}

## {background-color="white" background-image="backgrounds/mad2023_oss.png" background-size=contain}


## {background-color="white" background-image="backgrounds/mad2023.png" background-size=contain}

## {background-color="black" background-image="backgrounds/Pale_Blue_Dot.png" background-size=cover}

::: {.center .fragment .fade-in}
R is a <u>**tiny**</u> part of the statistical software landscape.
:::

::: {.center .fragment .fade-in}
I'm most experienced in using R and designing R packages.
:::

<br>
<br>

::: {.center .fragment .fade-in}
I will explore statistical software design with increasing specificity toward this very specific area I'm most familiar with.
:::

<br>
<br>

::: {.center .fragment .fade-in}
So yes, this talk is also <u>**biased**</u> :upside_down_face:
:::

## {background-color="white" background-image="backgrounds/scott-webb-hDyO6rr3kqk-unsplash.jpg" background-size=cover}

::: {.v-center-bottom style="height: 10%"}
::: {.r-fit-text}
The design of statistical software
:::
:::

::: {.center .fragment .fade-in}
:warning: This talk is not about writing good code! :warning:
<br>
*(watch [Jenny Bryan's presentation](https://www.youtube.com/watch?v=7oyiPBjLAWY) for this.)*
:::

::: {.center .fragment .fade-in}
:white_check_mark: It's about designing good (coding) interfaces :white_check_mark:
:::

## {background-color="white" data-background-opacity=0.5 background-image="backgrounds/med-badr-chemmaoui-ZSPBhokqDMc-unsplash.jpg" background-size=cover}

::: {.center}
<h2>Designing user interfaces</h2>
:::

::: {.center .fragment .fade-in}
The inputs and outputs for users of statistical software
:::

<br>
<br>
<br>

::: {.box-blond .center .fragment .fade-in}
<br>
<h3>:stars: Your turn! :stars:</h3>

What should be considered when designing a UI for data?

<br>
:::

## {background-color="#333641" background-video="media/chatgpt.mp4" background-size=contain}

## {background-color="#333641" background-image="backgrounds/chatgpt.png" background-size=contain}

## {background-color="white" data-background-opacity=0.5 background-image="backgrounds/med-badr-chemmaoui-ZSPBhokqDMc-unsplash.jpg" background-size=cover}

<h2>User interface design varies by...</h2>

<br>

::: {.center .fragment .custom .blur}
<h3>User</h3>
:::

::: {.center .blur}
<h3>Device</h3>
:::

::: {.center .blur}
<h3>Domain</h3>
:::

::: {.center .blur}
<h3>Language</h3>
:::

::: {.center .blur}
<h3>Developer</h3>
:::

## {background-color="black" data-background-opacity=0.25 background-image="backgrounds/sigmund-Im_cQ6hQo10-unsplash.jpg" background-size=cover}

::: {.v-center-bottom .center style="height: 20%;"}
<h2>Intended users</h2>
:::

<br>

::: {.center .fragment}
Are you designing for a technical user or not?
:::

::: {.center .fragment}
Which tools do you are your intended users familiar with?
:::


## {background-color="white" data-background-opacity=0.5 background-image="backgrounds/med-badr-chemmaoui-ZSPBhokqDMc-unsplash.jpg" background-size=cover}

<h2>User interface design varies by...</h2>

<br>

::: {.center}
<h3>User</h3>
:::

::: {.center .fragment .custom .blur}
<h3>Device</h3>
:::

::: {.center .blur}
<h3>Domain</h3>
:::

::: {.center .blur}
<h3>Language</h3>
:::

::: {.center .blur}
<h3>Developer</h3>
:::

## {background-color="black" background-image="backgrounds/glenn-carstens-peters-P1qyEf1g0HU-unsplash.jpg" background-size=cover}

::: {.v-center-bottom .center style="height: 80%"}
<h2>Human interface devices (HIDs)</h2>
:::

::: {.center}
HIDs exchange inputs and outputs between you and software.
:::

## Input devices {.center}

::: {.r-stack}
![](media/mouse.jpg){.fragment width="600"}

![](media/clay-banks-PXaQXThG1FY-unsplash.jpg){.fragment width="600"}

![](media/Google_Home_sitting_on_table.jpg){.fragment width="600"}

![](media/touch.jpg){.fragment width="600"}

:::


## Output devices {.center}

::: {.r-stack}
![](media/lukas-blazek-mcSDtbWXUZU-unsplash.jpg){.fragment width="600"}

![](media/tomasz-gawlowski-YDZPdqv3FcA-unsplash.jpg){.fragment width="600"}

![](media/ux-indonesia-8mikJ83LmSQ-unsplash.jpg){.fragment width="600"}

![](media/3dprint.jpg){.fragment width="600"}

![](media/arvr.png){.fragment width="600"}
:::

:::{.notes}
* display
* 2d printing
* 3d printing
* AR/VR
* sound
:::

## {background-color="white" data-background-opacity=0.5 background-image="backgrounds/med-badr-chemmaoui-ZSPBhokqDMc-unsplash.jpg" background-size=cover}

<h2>User interface design varies by...</h2>

<br>

::: {.center}
<h3>User</h3>
:::

::: {.center}
<h3>Device</h3>
:::

::: {.center .fragment .custom .blur}
<h3>Domain</h3>
:::

::: {.center .blur}
<h3>Language</h3>
:::

::: {.center .blur}
<h3>Developer</h3>
:::


## {background-color="black" data-background-opacity=0.5 background-image="backgrounds/inaki-del-olmo-NIJuEQw0RKg-unsplash.jpg" background-size=cover}

::: {.center}
<h2>Designing software for the domain</h2>
:::

<br>
<br>

::: {.center .fragment .custom .blur}
<h2>Data exploration</h2>
:::

::: {.center .fragment .custom .blur}
<h2>Math and probability</h2>
:::

::: {.center .fragment .custom .blur}
<h2>Bioinformatics</h2>
:::

::: {.center .fragment .custom .blur}
<h2>AI modelling</h2>
:::

::: {.center .fragment .custom .blur}
<h2>Time series</h2>
:::

## {background-color="white" data-background-opacity=0.5 background-image="backgrounds/med-badr-chemmaoui-ZSPBhokqDMc-unsplash.jpg" background-size=cover}

<h2>User interface design varies by...</h2>

<br>

::: {.center}
<h3>User</h3>
:::

::: {.center}
<h3>Device</h3>
:::

::: {.center}
<h3>Domain</h3>
:::

::: {.center .fragment .custom .blur}
<h3>Language</h3>
:::

::: {.center .blur}
<h3>Developer</h3>
:::


## {background-color="black" data-background-opacity=0.5 background-image="backgrounds/walkator-klMii3cR9iI-unsplash.jpg" background-size=cover}

::: {.center}
<h2>Design variation by language</h2>
:::

<br>
<br>

::: {.center .fragment .custom .blur}
<h2>Syntax</h2>
:::

::: {.center .fragment .custom .blur}
<h2>Paradigm</h2>
:::

::: {.center .fragment .custom .blur}
<h2>Community</h2>
:::

## Case study: {background-color="#3b5998"}

<br>
<br>
<br>

::: {.center .fragment}
![](media/prophet.svg){.center width="300"}
<br>

Developed by Facebook for R and Python users.
:::

## Case study: Prophet for Python {background-color="#3b5998" auto-animate=true}

```python
# load software
import pandas as pd
from prophet import Prophet

# data requires time in 'ds' and response in 'y' columns
df = pd.read_csv('https://raw.githubusercontent.com/facebook/prophet/main/examples/example_wp_log_peyton_manning.csv')
```

## Case study: Prophet for Python {background-color="#3b5998" auto-animate=true}

```python
# load software
import pandas as pd
from prophet import Prophet

# data requires time in 'ds' and response in 'y' columns
df = pd.read_csv('https://raw.githubusercontent.com/facebook/prophet/main/examples/example_wp_log_peyton_manning.csv')

# specify and estimate model
m = Prophet()
m.fit(df)
```

## Case study: Prophet for Python {background-color="#3b5998" auto-animate=true}

```python
# load software
import pandas as pd
from prophet import Prophet

# data requires time in 'ds' and response in 'y' columns
df = pd.read_csv('https://raw.githubusercontent.com/facebook/prophet/main/examples/example_wp_log_peyton_manning.csv')

# specify and estimate model
m = Prophet()
m.fit(df)

# produce forecasts
future = m.make_future_dataframe(periods=365)
forecast = m.predict(future)
```

## Case study: Prophet for Python {background-color="#3b5998" auto-animate=true}

```python
# load software
import pandas as pd
from prophet import Prophet

# data requires time in 'ds' and response in 'y' columns
df = pd.read_csv('https://raw.githubusercontent.com/facebook/prophet/main/examples/example_wp_log_peyton_manning.csv')

# specify and estimate model
m = Prophet()
m.fit(df)

# produce forecasts
future = m.make_future_dataframe(periods=365)
forecast = m.predict(future)

# plot results
fig1 = m.plot(forecast)
fig2 = m.plot_components(forecast)
```

## Case study: Prophet for R {background-color="#3b5998" auto-animate=true}

```r
# load software
library(prophet)

# data requires time in 'ds' and response in 'y' columns
df <- read.csv('https://raw.githubusercontent.com/facebook/prophet/main/examples/example_wp_log_peyton_manning.csv')
```

## Case study: Prophet for R {background-color="#3b5998" auto-animate=true}

```r
# load software
library(prophet)

# data requires time in 'ds' and response in 'y' columns
df <- read.csv('https://raw.githubusercontent.com/facebook/prophet/main/examples/example_wp_log_peyton_manning.csv')

# specify and estimate model
m <- prophet()
m <- fit.prophet(m, df)
```

:::{.center}
(this is slightly changed from the current documentation)
:::

## Case study: Prophet for R {background-color="#3b5998" auto-animate=true}

```r
# load software
library(prophet)

# data requires time in 'ds' and response in 'y' columns
df <- read.csv('https://raw.githubusercontent.com/facebook/prophet/main/examples/example_wp_log_peyton_manning.csv')

# specify and estimate model
m <- prophet()
m <- fit.prophet(m, df)

# produce forecasts
future <- make_future_dataframe(m, periods = 365)
forecast <- predict(m, future)
```

## Case study: Prophet for R {background-color="#3b5998" auto-animate=true}

```r
# load software
library(prophet)

# data requires time in 'ds' and response in 'y' columns
df <- read.csv('https://raw.githubusercontent.com/facebook/prophet/main/examples/example_wp_log_peyton_manning.csv')

# specify and estimate model
m <- prophet()
m <- fit.prophet(m, df)

# produce forecasts
future <- make_future_dataframe(m, periods = 365)
forecast <- predict(m, future)

# plot results
plot(m, forecast)
prophet_plot_components(m, forecast)
```

## Case study: Prophet {background-color="#3b5998"}

<br>

<h3>Pros:</h3>

::: {.fragment}
:white_check_mark: Very similar interface, easy to switch languages.

:white_check_mark: Easy to learn the few functions which produce forecasts.
:::

::: {.fragment}
<h3>Cons:</h3>
:::

::: {.fragment}
:x: Doesn't follow some R design themes.

:x: Linear code flow makes non-standard analysis hard.
:::

## {background-color="white" data-background-opacity=0.5 background-image="backgrounds/med-badr-chemmaoui-ZSPBhokqDMc-unsplash.jpg" background-size=cover}

<h2>User interface design varies by...</h2>

<br>

::: {.center}
<h3>User</h3>
:::

::: {.center}
<h3>Device</h3>
:::

::: {.center}
<h3>Domain</h3>
:::

::: {.center}
<h3>Language</h3>
:::

::: {.center .fragment .custom .blur}
<h3>Developer</h3>
:::

## {background-color="white" data-background-opacity=0.5 background-image="backgrounds/barney-yau-BbGuVc9YTaw-unsplash.jpg" background-size=cover}

::: {.center}
<h3>Design variations by author / group</h3>
:::

<br>
<br>

::: {.center .fragment .custom .blur}
<h3>base R, tidy R, bioconductor</h3>
:::

<br>

::: {.center .fragment .custom .blur}
<h3>dplyr, ggplot2, shiny</h3>
:::

<br>

::: {.center .fragment .custom .blur}
<h3>functions or grammars</h3>
:::

## {background-color="black" data-background-opacity=0.3 background-image="backgrounds/jen-theodore-Yu5fd5paLlc-unsplash.jpg" background-size=cover}

::: {.center}
<h2>Designs from the forecast package</h2>
:::

<br>
<br>

::: {.center .fragment}
<h2>That I re-designed for fable</h2>
:::

<br>
<br>

::: {.center .fragment}
![](media/fableforecast.png)
:::

## {background-color="black" data-background-opacity=0.3 background-image="backgrounds/jen-theodore-Yu5fd5paLlc-unsplash.jpg" background-size=cover}

<h2>Case study:</h2>

Forecasting Australian gas production

```{r}
gas_tsbl <- as_tsibble(gas) |> dplyr::rename(Month = index, Gas = value)
gas_tsbl |> 
  autoplot(Gas)
```


## {background-color="white" data-background-opacity=0.5 background-image="backgrounds/dmitry-grigoriev-yxXpjF-RrnA-unsplash.jpg" background-size=cover}

<h2>Patterns of good software design</h2>

<br>

::: { .fragment .custom .blur}
<h3>Simple and intuitive</h3>
:::

::: { .blur}
<h3>Flexible</h3>
:::

::: { .blur}
<h3>Consistent</h3>
:::

::: { .blur}
<h3>Accessible</h3>
:::

::: { .blur}
<h3>Provides feedback</h3>
:::

:::{.notes}
Simple/intuitive: Software should have a simple and intuitive interface that is easy to navigate and use. Users should be able to easily find the features they need and understand how to use them.

Consistency: The design of the software should be consistent throughout. Common functions should return the same structured output.

Helpful feedback: Software should Provide helpful feedback to the user when they perform an action, such as displaying a message when an error occurs. It should also provide guidance to the user when they need help or are unsure of how to perform a task.

Accessibility: Software should be designed to be accessible to users with disabilities. This can include features like text-to-speech and keyboard shortcuts.
:::

## {background-color="black" data-background-opacity=0.3 background-image="backgrounds/dan-lohmar-0zeb4q6odlE-unsplash.jpg" background-size=cover auto-animate=true}

<h2 class="center">Simple and intuitive</h2>

:::{.fragment}
```{r}
#| echo: true
library(forecast)
fit <- ets(gas, lambda = 0, model = "AAA")
forecast(fit, h = 72)
```
:::

## {background-color="black" data-background-opacity=0.3 background-image="backgrounds/dan-lohmar-0zeb4q6odlE-unsplash.jpg" background-size=cover auto-animate=true}

<h2 class="center">Simple and intuitive</h2>

```{r}
#| echo: true
library(forecast)
fit <- ets(gas, lambda = 0, model = "AAA")
forecast(fit, h = 72)$mean
```

## {background-color="black" data-background-opacity=0.3 background-image="backgrounds/dan-lohmar-0zeb4q6odlE-unsplash.jpg" background-size=cover auto-animate=true}

<h2 class="center">Simple and intuitive</h2>

```{r}
#| echo: true
library(forecast)
fit <- ets(gas, lambda = 0, model = "AAA")
forecast(fit, h = 72, biasadj = TRUE)$mean
```

## {background-color="black" data-background-opacity=0.3 background-image="backgrounds/dan-lohmar-0zeb4q6odlE-unsplash.jpg" background-size=cover auto-animate=true}

<h2 class="center">Simple and intuitive</h2>

```{r}
#| echo: true
library(fable)
gas_tsbl |> 
  model(ets = ETS(log(Gas) ~ error("A") + trend("A") + season("A"))) |> 
  forecast(h = "6 years")
```

## {background-color="black" data-background-opacity=0.3 background-image="backgrounds/dan-lohmar-0zeb4q6odlE-unsplash.jpg" background-size=cover auto-animate=true}

<h2 class="center">Simple and intuitive</h2>

```{r}
#| echo: true
library(fable)
gas_tsbl |> 
  model(ets = ETS(log(Gas) ~ error("A") + trend("A") + season("A"))) |> 
  forecast(h = "6 years") |> 
  dplyr::mutate(mean(Gas), median(Gas))
```

## {background-color="white" data-background-opacity=0.5 background-image="backgrounds/dmitry-grigoriev-yxXpjF-RrnA-unsplash.jpg" background-size=cover}

<h2>Patterns of good software design</h2>

<br>

::: {.div}
<h3>Simple and intuitive</h3>
:::

::: { .fragment .custom .blur}
<h3>Flexible</h3>
:::

::: { .blur}
<h3>Consistent</h3>
:::

::: { .blur}
<h3>Accessible</h3>
:::

::: { .blur}
<h3>Provides feedback</h3>
:::

## {background-color="black" data-background-opacity=0.3 background-image="backgrounds/kike-vega-F2qh3yjz6Jk-unsplash.jpg" background-size=cover auto-animate=true}

<h2 class="center">Flexible</h2>

::: {.fragment}
```{r}
#| echo: true
library(forecast)
fit <- ets(gas + 1, lambda = 0, model = "AAA")
forecast(fit, h = 72, biasadj = TRUE)
```
:::


## {background-color="black" data-background-opacity=0.3 background-image="backgrounds/kike-vega-F2qh3yjz6Jk-unsplash.jpg" background-size=cover auto-animate=true}

<h2 class="center">Flexible</h2>

```{r}
#| echo: true
library(fable)
gas_tsbl |> 
  model(ets = ETS(log(Gas + 1) ~ error("A") + trend("A") + season("A"))) |> 
  forecast(h = "6 years")
```

## {background-color="white" data-background-opacity=0.5 background-image="backgrounds/dmitry-grigoriev-yxXpjF-RrnA-unsplash.jpg" background-size=cover}

<h2>Patterns of good software design</h2>

<br>

::: {.div}
<h3>Simple and intuitive</h3>
:::

::: {.div}
<h3>Flexible</h3>
:::

::: { .fragment .custom .blur}
<h3>Consistent</h3>
:::

::: { .blur}
<h3>Accessible</h3>
:::

::: { .blur}
<h3>Provides feedback</h3>
:::

## {background-color="black" data-background-opacity=0.3 background-image="backgrounds/jonathan-borba-xRDuEeG1TVI-unsplash.jpg" background-size=cover auto-animate=true}

<h2 class="center">Consistent</h2>

::: {.fragment}
```{r}
#| echo: true
#| error: true
library(forecast)
fit_ets <- ets(gas + 1, lambda = 0, model = "AAA")
fc_ets <- forecast(fit_ets, h = 72, biasadj = TRUE)
fc_ets
```
:::

## {background-color="black" data-background-opacity=0.3 background-image="backgrounds/jonathan-borba-xRDuEeG1TVI-unsplash.jpg" background-size=cover auto-animate=true}

<h2 class="center">Consistent</h2>

```{r}
#| echo: true
#| error: true
library(forecast)
fit_ets <- ets(gas + 1, lambda = 0, model = "AAA")
fc_ets <- forecast(fit_ets, h = 72, biasadj = TRUE)
fit_snaive <- snaive(gas)
fc_snaive <- forecast(fit_snaive, h = 72)
```

## {background-color="black" data-background-opacity=0.3 background-image="backgrounds/jonathan-borba-xRDuEeG1TVI-unsplash.jpg" background-size=cover auto-animate=true}

<h2 class="center">Consistent</h2>

```{r}
#| echo: true
#| error: true
library(forecast)
fit_ets <- ets(gas + 1, lambda = 0, model = "AAA")
fc_ets <- forecast(fit_ets, h = 72, biasadj = TRUE)
fit_snaive <- snaive(gas)
# fc_snaive <- forecast(fit_snaive, h = 72)
fit_snaive
```

## {background-color="black" data-background-opacity=0.3 background-image="backgrounds/jonathan-borba-xRDuEeG1TVI-unsplash.jpg" background-size=cover auto-animate=true}

<h2 class="center">Consistent</h2>

::: {.fragment}
```{r}
#| echo: true
library(fable)
gas_tsbl |> 
  model(
    ets = ETS(log(Gas + 1) ~ error("A") + trend("A") + season("A")),
    snaive = SNAIVE(Gas)
  ) |> 
  forecast(h = "6 years")
```
:::


## {background-color="black" data-background-opacity=0.3 background-image="backgrounds/jonathan-borba-xRDuEeG1TVI-unsplash.jpg" background-size=cover auto-animate=true}

<h2 class="center">Consistent</h2>

:::{.center}
Consistency within your own software is a must.
:::

<br> 

:::{.center .fragment}
It's even better to be consistent with your community.
:::

## {background-color="white" data-background-opacity=0.5 background-image="backgrounds/dmitry-grigoriev-yxXpjF-RrnA-unsplash.jpg" background-size=cover}

<h2>Patterns of good software design</h2>

<br>

::: {.div}
<h3>Simple and intuitive</h3>
:::

::: {.div}
<h3>Flexible</h3>
:::

::: {.div}
<h3>Consistent</h3>
:::

::: { .fragment .custom .blur}
<h3>Accessible</h3>
:::

::: { .blur}
<h3>Provides feedback</h3>
:::

## {background-color="black" data-background-opacity=0.5 background-image="backgrounds/dave-hoefler-hGe_wjAEW3Q-unsplash.jpg" background-size=cover}

<h2 class="center">Accessible</h2>

<br>

::: {.center .fragment .custom .blur}
<h3>Free and open source</h3>
:::

::: {.center .fragment .custom .blur}
<h3>Readily available documentation</h3>
:::

::: {.center .fragment .custom .blur}
<h3>Accessible to people of all abilities</h3>
:::

::: {.center .fragment .custom .blur}
<h3>Internationalised</h3>
:::


## {background-color="white" data-background-opacity=0.5 background-image="backgrounds/dmitry-grigoriev-yxXpjF-RrnA-unsplash.jpg" background-size=cover}

<h2>Patterns of good software design</h2>

<br>

::: {.div}
<h3>Simple and intuitive</h3>
:::

::: {.div}
<h3>Flexible</h3>
:::

::: {.div}
<h3>Consistent</h3>
:::

::: {.div}
<h3>Accessible</h3>
:::

::: { .fragment .custom .blur}
<h3>Provides feedback</h3>
:::

## {background-color="black" data-background-opacity=0.3 background-image="backgrounds/absolutvision-82TpEld0_e4-unsplash.jpg" background-size=cover auto-animate=true}

<h2 class="center">Provide helpful feedback</h2>

::: {.fragment}
```{r}
#| echo: true
mu <- mean(gas)
```
:::


## {background-color="black" data-background-opacity=0.3 background-image="backgrounds/absolutvision-82TpEld0_e4-unsplash.jpg" background-size=cover auto-animate=true}

<h2 class="center">Provide helpful feedback</h2>

```{r}
#| echo: true
fc <- gas_tsbl |> 
  model(ets = ETS(log(Gas + 1) ~ error("A") + trend("A") + season("A"))) |> 
  forecast(h = "6 years") |> 
  autoplot(gas_tsbl)
```

## {background-color="black" data-background-opacity=0.3 background-image="backgrounds/absolutvision-82TpEld0_e4-unsplash.jpg" background-size=cover auto-animate=true}

<h2 class="center">Provide helpful feedback</h2>

```{r}
#| echo: true
#| error: true
gas_tsbl |> 
  model(ets = ETS(log(Gas + 1) ~ error("A") + trend("A") + season("A"))) |> 
  forecast(h = "6 years") |> 
  autoplot(gas_tsbl) |> 
  geom_point(colour = "blue")
```

## {background-color="white" data-background-opacity=0.5 background-image="backgrounds/dmitry-grigoriev-yxXpjF-RrnA-unsplash.jpg" background-size=cover}

<h2>Some tips for designing good software</h2>

<br>

Your software design should bee:

<h3>Simple</h3>

<h3>Flexible</h3>

<h3>Consistent</h3>

<h3>Accessible</h3>

<h3>Helpful</h3>

<br>

::: {.center .fragment}
<h3>Thanks for your time, hope it was worthwhile!</h3>
:::
